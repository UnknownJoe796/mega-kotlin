base - ( /kotlin = "/*UNKNOWN*/"/interpret )
 - ( /kotlin = "/*UNKNOWN*/"/interpret )
rock.integer.signed.1.plus - ( /kotlin = `(${.left} + ${.right}).toByte()`/interpret )
rock.integer.signed.1.minus - ( /kotlin = `(${.left} - ${.right}).toByte()`/interpret )
rock.integer.signed.1.times - ( /kotlin = `(${.left} * ${.right}).toByte()`/interpret )
rock.integer.signed.1.divide - ( /kotlin = `(${.left} / ${.right}).toByte()`/interpret )
rock.integer.signed.1.remainder - ( /kotlin = `(${.left} % ${.right}).toByte()`/interpret )
rock.integer.signed.1.equal - ( /kotlin = `${.left} == ${.right}`/interpret )
rock.integer.signed.1.compare - ( /kotlin = `${.lesser} < ${.greater}`/interpret )
rock.integer.signed.1.sum - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((0).toByte()){sum, it -> (sum + it).toByte()}`/interpret )
rock.integer.signed.1.product - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((1).toByte()){sum, it -> (sum + it).toByte()}`/interpret )
rock.integer.signed.2.plus - ( /kotlin = `(${.left} + ${.right}).toShort()`/interpret )
rock.integer.signed.2.minus - ( /kotlin = `(${.left} - ${.right}).toShort()`/interpret )
rock.integer.signed.2.times - ( /kotlin = `(${.left} * ${.right}).toShort()`/interpret )
rock.integer.signed.2.divide - ( /kotlin = `(${.left} / ${.right}).toShort()`/interpret )
rock.integer.signed.2.remainder - ( /kotlin = `(${.left} % ${.right}).toShort()`/interpret )
rock.integer.signed.2.equal - ( /kotlin = `${.left} == ${.right}`/interpret )
rock.integer.signed.2.compare - ( /kotlin = `${.lesser} < ${.greater}`/interpret )
rock.integer.signed.2.sum - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((0).toShort()){sum, it -> (sum + it).toShort()}`/interpret )
rock.integer.signed.2.product - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((1).toShort()){sum, it -> (sum + it).toShort()}`/interpret )
rock.integer.signed.4.plus - ( /kotlin = `(${.left} + ${.right}).toInt()`/interpret )
rock.integer.signed.4.minus - ( /kotlin = `(${.left} - ${.right}).toInt()`/interpret )
rock.integer.signed.4.times - ( /kotlin = `(${.left} * ${.right}).toInt()`/interpret )
rock.integer.signed.4.divide - ( /kotlin = `(${.left} / ${.right}).toInt()`/interpret )
rock.integer.signed.4.remainder - ( /kotlin = `(${.left} % ${.right}).toInt()`/interpret )
rock.integer.signed.4.equal - ( /kotlin = `${.left} == ${.right}`/interpret )
rock.integer.signed.4.compare - ( /kotlin = `${.lesser} < ${.greater}`/interpret )
rock.integer.signed.4.sum - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((0).toInt()){sum, it -> (sum + it).toInt()}`/interpret )
rock.integer.signed.4.product - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((1).toInt()){sum, it -> (sum + it).toInt()}`/interpret )
rock.integer.signed.8.plus - ( /kotlin = `(${.left} + ${.right}).toLong()`/interpret )
rock.integer.signed.8.minus - ( /kotlin = `(${.left} - ${.right}).toLong()`/interpret )
rock.integer.signed.8.times - ( /kotlin = `(${.left} * ${.right}).toLong()`/interpret )
rock.integer.signed.8.divide - ( /kotlin = `(${.left} / ${.right}).toLong()`/interpret )
rock.integer.signed.8.remainder - ( /kotlin = `(${.left} % ${.right}).toLong()`/interpret )
rock.integer.signed.8.equal - ( /kotlin = `${.left} == ${.right}`/interpret )
rock.integer.signed.8.compare - ( /kotlin = `${.lesser} < ${.greater}`/interpret )
rock.integer.signed.8.sum - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((0).toLong()){sum, it -> (sum + it).toLong()}`/interpret )
rock.integer.signed.8.product - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((1).toLong()){sum, it -> (sum + it).toLong()}`/interpret )
rock.integer.unsigned.1.plus - ( /kotlin = `(${.left} + ${.right}).toByte()`/interpret )
rock.integer.unsigned.1.minus - ( /kotlin = `(${.left} - ${.right}).toByte()`/interpret )
rock.integer.unsigned.1.times - ( /kotlin = `(${.left} * ${.right}).toByte()`/interpret )
rock.integer.unsigned.1.divide - ( /kotlin = `(${.left} / ${.right}).toByte()`/interpret )
rock.integer.unsigned.1.remainder - ( /kotlin = `(${.left} % ${.right}).toByte()`/interpret )
rock.integer.unsigned.1.equal - ( /kotlin = `${.left} == ${.right}`/interpret )
rock.integer.unsigned.1.compare - ( /kotlin = `${.lesser} < ${.greater}`/interpret )
rock.integer.unsigned.1.sum - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((0).toByte()){sum, it -> (sum + it).toByte()}`/interpret )
rock.integer.unsigned.1.product - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((1).toByte()){sum, it -> (sum + it).toByte()}`/interpret )
rock.integer.unsigned.1.negate - ( /kotlin = `-${.value}`/interpret )
rock.integer.unsigned.2.plus - ( /kotlin = `(${.left} + ${.right}).toShort()`/interpret )
rock.integer.unsigned.2.minus - ( /kotlin = `(${.left} - ${.right}).toShort()`/interpret )
rock.integer.unsigned.2.times - ( /kotlin = `(${.left} * ${.right}).toShort()`/interpret )
rock.integer.unsigned.2.divide - ( /kotlin = `(${.left} / ${.right}).toShort()`/interpret )
rock.integer.unsigned.2.remainder - ( /kotlin = `(${.left} % ${.right}).toShort()`/interpret )
rock.integer.unsigned.2.equal - ( /kotlin = `${.left} == ${.right}`/interpret )
rock.integer.unsigned.2.compare - ( /kotlin = `${.lesser} < ${.greater}`/interpret )
rock.integer.unsigned.2.sum - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((0).toShort()){sum, it -> (sum + it).toShort()}`/interpret )
rock.integer.unsigned.2.product - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((1).toShort()){sum, it -> (sum + it).toShort()}`/interpret )
rock.integer.unsigned.2.negate - ( /kotlin = `-${.value}`/interpret )
rock.integer.unsigned.4.plus - ( /kotlin = `(${.left} + ${.right}).toInt()`/interpret )
rock.integer.unsigned.4.minus - ( /kotlin = `(${.left} - ${.right}).toInt()`/interpret )
rock.integer.unsigned.4.times - ( /kotlin = `(${.left} * ${.right}).toInt()`/interpret )
rock.integer.unsigned.4.divide - ( /kotlin = `(${.left} / ${.right}).toInt()`/interpret )
rock.integer.unsigned.4.remainder - ( /kotlin = `(${.left} % ${.right}).toInt()`/interpret )
rock.integer.unsigned.4.equal - ( /kotlin = `${.left} == ${.right}`/interpret )
rock.integer.unsigned.4.compare - ( /kotlin = `${.lesser} < ${.greater}`/interpret )
rock.integer.unsigned.4.sum - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((0).toInt()){sum, it -> (sum + it).toInt()}`/interpret )
rock.integer.unsigned.4.product - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((1).toInt()){sum, it -> (sum + it).toInt()}`/interpret )
rock.integer.unsigned.4.negate - ( /kotlin = `-${.value}`/interpret )
rock.integer.unsigned.8.plus - ( /kotlin = `(${.left} + ${.right}).toLong()`/interpret )
rock.integer.unsigned.8.minus - ( /kotlin = `(${.left} - ${.right}).toLong()`/interpret )
rock.integer.unsigned.8.times - ( /kotlin = `(${.left} * ${.right}).toLong()`/interpret )
rock.integer.unsigned.8.divide - ( /kotlin = `(${.left} / ${.right}).toLong()`/interpret )
rock.integer.unsigned.8.remainder - ( /kotlin = `(${.left} % ${.right}).toLong()`/interpret )
rock.integer.unsigned.8.equal - ( /kotlin = `${.left} == ${.right}`/interpret )
rock.integer.unsigned.8.compare - ( /kotlin = `${.lesser} < ${.greater}`/interpret )
rock.integer.unsigned.8.sum - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((0).toLong()){sum, it -> (sum + it).toLong()}`/interpret )
rock.integer.unsigned.8.product - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((1).toLong()){sum, it -> (sum + it).toLong()}`/interpret )
rock.integer.unsigned.8.negate - ( /kotlin = `-${.value}`/interpret )
rock.float.2.plus - ( /kotlin = `(${.left} + ${.right}).toFloat()`/interpret )
rock.float.2.minus - ( /kotlin = `(${.left} - ${.right}).toFloat()`/interpret )
rock.float.2.times - ( /kotlin = `(${.left} * ${.right}).toFloat()`/interpret )
rock.float.2.divide - ( /kotlin = `(${.left} / ${.right}).toFloat()`/interpret )
rock.float.2.remainder - ( /kotlin = `(${.left} % ${.right}).toFloat()`/interpret )
rock.float.2.equal - ( /kotlin = `${.left} == ${.right}`/interpret )
rock.float.2.compare - ( /kotlin = `${.lesser} < ${.greater}`/interpret )
rock.float.2.sum - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((0).toFloat()){sum, it -> (sum + it).toFloat()}`/interpret )
rock.float.2.product - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((1).toFloat()){sum, it -> (sum + it).toFloat()}`/interpret )
rock.float.2.negate - ( /kotlin = `-${.value}`/interpret )
rock.float.2.power - ( /kotlin = `(Math.pow(${.value}.toDouble(), ${.exponent})).toFloat()`/interpret )
rock.float.2.ceiling - ( /kotlin = `(Math.ceil(${.value}.toDouble())).toFloat()`/interpret )
rock.float.2.floor - ( /kotlin = `(Math.floor(${.value}.toDouble())).toFloat()`/interpret )
rock.float.2.round - ( /kotlin = `(Math.round(${.value}.toDouble())).toFloat()`/interpret )
rock.float.2.squareRoot - ( /kotlin = `(Math.sqrt(${.value}.toDouble())).toFloat()`/interpret )
rock.float.2.sin - ( /kotlin = `(Math.sin(${.value}.toDouble())).toFloat()`/interpret )
rock.float.2.cos - ( /kotlin = `(Math.cos(${.value}.toDouble())).toFloat()`/interpret )
rock.float.2.tan - ( /kotlin = `(Math.tan(${.value}.toDouble())).toFloat()`/interpret )
rock.float.2.asin - ( /kotlin = `(Math.asin(${.value}.toDouble())).toFloat()`/interpret )
rock.float.2.acos - ( /kotlin = `(Math.acos(${.value}.toDouble())).toFloat()`/interpret )
rock.float.2.atan - ( /kotlin = `(Math.atan(${.value}.toDouble())).toFloat()`/interpret )
rock.float.2.atan2 - ( /kotlin = `(Math.atan2(${.y}.toDouble(), ${.x}.toDouble())).toFloat()`/interpret )
rock.float.2.log - ( /kotlin = `(Math.log(${.value}.toDouble())).toFloat()`/interpret )
rock.float.2.log10 - ( /kotlin = `(Math.log10(${.value}.toDouble())).toFloat()`/interpret )
rock.float.4.plus - ( /kotlin = `(${.left} + ${.right}).toFloat()`/interpret )
rock.float.4.minus - ( /kotlin = `(${.left} - ${.right}).toFloat()`/interpret )
rock.float.4.times - ( /kotlin = `(${.left} * ${.right}).toFloat()`/interpret )
rock.float.4.divide - ( /kotlin = `(${.left} / ${.right}).toFloat()`/interpret )
rock.float.4.remainder - ( /kotlin = `(${.left} % ${.right}).toFloat()`/interpret )
rock.float.4.equal - ( /kotlin = `${.left} == ${.right}`/interpret )
rock.float.4.compare - ( /kotlin = `${.lesser} < ${.greater}`/interpret )
rock.float.4.sum - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((0).toFloat()){sum, it -> (sum + it).toFloat()}`/interpret )
rock.float.4.product - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((1).toFloat()){sum, it -> (sum + it).toFloat()}`/interpret )
rock.float.4.negate - ( /kotlin = `-${.value}`/interpret )
rock.float.4.power - ( /kotlin = `(Math.pow(${.value}.toDouble(), ${.exponent})).toFloat()`/interpret )
rock.float.4.ceiling - ( /kotlin = `(Math.ceil(${.value}.toDouble())).toFloat()`/interpret )
rock.float.4.floor - ( /kotlin = `(Math.floor(${.value}.toDouble())).toFloat()`/interpret )
rock.float.4.round - ( /kotlin = `(Math.round(${.value}.toDouble())).toFloat()`/interpret )
rock.float.4.squareRoot - ( /kotlin = `(Math.sqrt(${.value}.toDouble())).toFloat()`/interpret )
rock.float.4.sin - ( /kotlin = `(Math.sin(${.value}.toDouble())).toFloat()`/interpret )
rock.float.4.cos - ( /kotlin = `(Math.cos(${.value}.toDouble())).toFloat()`/interpret )
rock.float.4.tan - ( /kotlin = `(Math.tan(${.value}.toDouble())).toFloat()`/interpret )
rock.float.4.asin - ( /kotlin = `(Math.asin(${.value}.toDouble())).toFloat()`/interpret )
rock.float.4.acos - ( /kotlin = `(Math.acos(${.value}.toDouble())).toFloat()`/interpret )
rock.float.4.atan - ( /kotlin = `(Math.atan(${.value}.toDouble())).toFloat()`/interpret )
rock.float.4.atan2 - ( /kotlin = `(Math.atan2(${.y}.toDouble(), ${.x}.toDouble())).toFloat()`/interpret )
rock.float.4.log - ( /kotlin = `(Math.log(${.value}.toDouble())).toFloat()`/interpret )
rock.float.4.log10 - ( /kotlin = `(Math.log10(${.value}.toDouble())).toFloat()`/interpret )
rock.float.8.plus - ( /kotlin = `(${.left} + ${.right}).toDouble()`/interpret )
rock.float.8.minus - ( /kotlin = `(${.left} - ${.right}).toDouble()`/interpret )
rock.float.8.times - ( /kotlin = `(${.left} * ${.right}).toDouble()`/interpret )
rock.float.8.divide - ( /kotlin = `(${.left} / ${.right}).toDouble()`/interpret )
rock.float.8.remainder - ( /kotlin = `(${.left} % ${.right}).toDouble()`/interpret )
rock.float.8.equal - ( /kotlin = `${.left} == ${.right}`/interpret )
rock.float.8.compare - ( /kotlin = `${.lesser} < ${.greater}`/interpret )
rock.float.8.sum - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((0).toDouble()){sum, it -> (sum + it).toDouble()}`/interpret )
rock.float.8.product - ( /kotlin = `sequenceOf(${rock.string.join( values = .values  separator = ", " )}).fold((1).toDouble()){sum, it -> (sum + it).toDouble()}`/interpret )
rock.float.8.negate - ( /kotlin = `-${.value}`/interpret )
rock.float.8.power - ( /kotlin = `(Math.pow(${.value}.toDouble(), ${.exponent})).toDouble()`/interpret )
rock.float.8.ceiling - ( /kotlin = `(Math.ceil(${.value}.toDouble())).toDouble()`/interpret )
rock.float.8.floor - ( /kotlin = `(Math.floor(${.value}.toDouble())).toDouble()`/interpret )
rock.float.8.round - ( /kotlin = `(Math.round(${.value}.toDouble())).toDouble()`/interpret )
rock.float.8.squareRoot - ( /kotlin = `(Math.sqrt(${.value}.toDouble())).toDouble()`/interpret )
rock.float.8.sin - ( /kotlin = `(Math.sin(${.value}.toDouble())).toDouble()`/interpret )
rock.float.8.cos - ( /kotlin = `(Math.cos(${.value}.toDouble())).toDouble()`/interpret )
rock.float.8.tan - ( /kotlin = `(Math.tan(${.value}.toDouble())).toDouble()`/interpret )
rock.float.8.asin - ( /kotlin = `(Math.asin(${.value}.toDouble())).toDouble()`/interpret )
rock.float.8.acos - ( /kotlin = `(Math.acos(${.value}.toDouble())).toDouble()`/interpret )
rock.float.8.atan - ( /kotlin = `(Math.atan(${.value}.toDouble())).toDouble()`/interpret )
rock.float.8.atan2 - ( /kotlin = `(Math.atan2(${.y}.toDouble(), ${.x}.toDouble())).toDouble()`/interpret )
rock.float.8.log - ( /kotlin = `(Math.log(${.value}.toDouble())).toDouble()`/interpret )
rock.float.8.log10 - ( /kotlin = `(Math.log10(${.value}.toDouble())).toDouble()`/interpret )
rock.integer.unsigned.1.absolute - ( /kotlin = `(Math.abs(${.value}.toInt())).toByte()`/interpret )
rock.integer.unsigned.2.absolute - ( /kotlin = `(Math.abs(${.value}.toInt())).toShort()`/interpret )
rock.integer.signed.1.absolute - ( /kotlin = `(Math.abs(${.value}.toInt())).toByte()`/interpret )
rock.integer.signed.2.absolute - ( /kotlin = `(Math.abs(${.value}.toInt())).toShort()`/interpret )
rock.integer.signed.4.absolute - ( /kotlin = `(Math.abs(${.value})).toInt()`/interpret )
rock.integer.signed.8.absolute - ( /kotlin = `(Math.abs(${.value})).toLong()`/interpret )
rock.integer.unsigned.4.absolute - ( /kotlin = `(Math.abs(${.value})).toInt()`/interpret )
rock.integer.unsigned.8.absolute - ( /kotlin = `(Math.abs(${.value})).toLong()`/interpret )
rock.float.2.absolute - ( /kotlin = `(Math.abs(${.value})).toFloat()`/interpret )
rock.float.4.absolute - ( /kotlin = `(Math.abs(${.value})).toFloat()`/interpret )
rock.float.8.absolute - ( /kotlin = `(Math.abs(${.value})).toDouble()`/interpret )

rock.float.4_to_rock.float.2 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.float.4_to_rock.float.8 - ( /kotlin = `(${.value}).toDouble()`/interpret )
rock.float.4_to_rock.integer.signed.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.float.4_to_rock.integer.signed.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.float.4_to_rock.integer.signed.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.float.4_to_rock.integer.signed.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.float.4_to_rock.integer.unsigned.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.float.4_to_rock.integer.unsigned.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.float.4_to_rock.integer.unsigned.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.float.4_to_rock.integer.unsigned.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.float.4_to_rock.string - ( /kotlin = `(${.value}).toString()`/interpret )

rock.float.8_to_rock.float.2 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.float.8_to_rock.float.4 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.float.8_to_rock.integer.signed.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.float.8_to_rock.integer.signed.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.float.8_to_rock.integer.signed.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.float.8_to_rock.integer.signed.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.float.8_to_rock.integer.unsigned.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.float.8_to_rock.integer.unsigned.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.float.8_to_rock.integer.unsigned.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.float.8_to_rock.integer.unsigned.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.float.8_to_rock.string - ( /kotlin = `(${.value}).toString()`/interpret )

rock.integer.signed.1_to_rock.float.2 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.signed.1_to_rock.float.4 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.signed.1_to_rock.float.8 - ( /kotlin = `(${.value}).toDouble()`/interpret )
rock.integer.signed.1_to_rock.integer.signed.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.signed.1_to_rock.integer.signed.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.signed.1_to_rock.integer.signed.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.signed.1_to_rock.integer.unsigned.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.signed.1_to_rock.integer.unsigned.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.signed.1_to_rock.integer.unsigned.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.signed.1_to_rock.integer.unsigned.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.signed.1_to_rock.string - ( /kotlin = `(${.value}).toString()`/interpret )

rock.integer.signed.2_to_rock.float.2 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.signed.2_to_rock.float.4 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.signed.2_to_rock.float.8 - ( /kotlin = `(${.value}).toDouble()`/interpret )
rock.integer.signed.2_to_rock.integer.signed.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.signed.2_to_rock.integer.signed.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.signed.2_to_rock.integer.signed.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.signed.2_to_rock.integer.unsigned.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.signed.2_to_rock.integer.unsigned.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.signed.2_to_rock.integer.unsigned.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.signed.2_to_rock.integer.unsigned.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.signed.2_to_rock.string - ( /kotlin = `(${.value}).toString()`/interpret )

rock.integer.signed.4_to_rock.float.2 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.signed.4_to_rock.float.4 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.signed.4_to_rock.float.8 - ( /kotlin = `(${.value}).toDouble()`/interpret )
rock.integer.signed.4_to_rock.integer.signed.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.signed.4_to_rock.integer.signed.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.signed.4_to_rock.integer.signed.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.signed.4_to_rock.integer.unsigned.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.signed.4_to_rock.integer.unsigned.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.signed.4_to_rock.integer.unsigned.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.signed.4_to_rock.integer.unsigned.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.signed.4_to_rock.string - ( /kotlin = `(${.value}).toString()`/interpret )

rock.integer.signed.8_to_rock.float.2 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.signed.8_to_rock.float.4 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.signed.8_to_rock.float.8 - ( /kotlin = `(${.value}).toDouble()`/interpret )
rock.integer.signed.8_to_rock.integer.signed.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.signed.8_to_rock.integer.signed.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.signed.8_to_rock.integer.signed.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.signed.8_to_rock.integer.unsigned.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.signed.8_to_rock.integer.unsigned.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.signed.8_to_rock.integer.unsigned.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.signed.8_to_rock.integer.unsigned.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.signed.8_to_rock.string - ( /kotlin = `(${.value}).toString()`/interpret )

rock.integer.unsigned.1_to_rock.float.2 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.unsigned.1_to_rock.float.4 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.unsigned.1_to_rock.float.8 - ( /kotlin = `(${.value}).toDouble()`/interpret )
rock.integer.unsigned.1_to_rock.integer.signed.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.unsigned.1_to_rock.integer.signed.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.unsigned.1_to_rock.integer.signed.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.unsigned.1_to_rock.integer.signed.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.unsigned.1_to_rock.integer.unsigned.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.unsigned.1_to_rock.integer.unsigned.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.unsigned.1_to_rock.integer.unsigned.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.unsigned.1_to_rock.string - ( /kotlin = `(${.value}).toString()`/interpret )

rock.integer.unsigned.2_to_rock.float.2 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.unsigned.2_to_rock.float.4 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.unsigned.2_to_rock.float.8 - ( /kotlin = `(${.value}).toDouble()`/interpret )
rock.integer.unsigned.2_to_rock.integer.signed.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.unsigned.2_to_rock.integer.signed.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.unsigned.2_to_rock.integer.signed.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.unsigned.2_to_rock.integer.signed.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.unsigned.2_to_rock.integer.unsigned.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.unsigned.2_to_rock.integer.unsigned.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.unsigned.2_to_rock.integer.unsigned.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.unsigned.2_to_rock.string - ( /kotlin = `(${.value}).toString()`/interpret )

rock.integer.unsigned.4_to_rock.float.2 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.unsigned.4_to_rock.float.4 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.unsigned.4_to_rock.float.8 - ( /kotlin = `(${.value}).toDouble()`/interpret )
rock.integer.unsigned.4_to_rock.integer.signed.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.unsigned.4_to_rock.integer.signed.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.unsigned.4_to_rock.integer.signed.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.unsigned.4_to_rock.integer.signed.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.unsigned.4_to_rock.integer.unsigned.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.unsigned.4_to_rock.integer.unsigned.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.unsigned.4_to_rock.integer.unsigned.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.unsigned.4_to_rock.string - ( /kotlin = `(${.value}).toString()`/interpret )

rock.integer.unsigned.8_to_rock.float.2 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.unsigned.8_to_rock.float.4 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.integer.unsigned.8_to_rock.float.8 - ( /kotlin = `(${.value}).toDouble()`/interpret )
rock.integer.unsigned.8_to_rock.integer.signed.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.unsigned.8_to_rock.integer.signed.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.unsigned.8_to_rock.integer.signed.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.unsigned.8_to_rock.integer.signed.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.integer.unsigned.8_to_rock.integer.unsigned.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.integer.unsigned.8_to_rock.integer.unsigned.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.integer.unsigned.8_to_rock.integer.unsigned.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.integer.unsigned.8_to_rock.string - ( /kotlin = `(${.value}).toString()`/interpret )

rock.string_to_rock.float.2 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.string_to_rock.float.4 - ( /kotlin = `(${.value}).toFloat()`/interpret )
rock.string_to_rock.float.8 - ( /kotlin = `(${.value}).toDouble()`/interpret )
rock.string_to_rock.integer.signed.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.string_to_rock.integer.signed.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.string_to_rock.integer.signed.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.string_to_rock.integer.signed.8 - ( /kotlin = `(${.value}).toLong()`/interpret )
rock.string_to_rock.integer.unsigned.1 - ( /kotlin = `(${.value}).toByte()`/interpret )
rock.string_to_rock.integer.unsigned.2 - ( /kotlin = `(${.value}).toShort()`/interpret )
rock.string_to_rock.integer.unsigned.4 - ( /kotlin = `(${.value}).toInt()`/interpret )
rock.string_to_rock.integer.unsigned.8 - ( /kotlin = `(${.value}).toLong()`/interpret )

rock.integer.signed.1.literal - ( /kotlin = rock.integer.signed.1_to_rock.string/interpret( value = rock.reflection.literal( value = . ) ) )
rock.integer.signed.2.literal - ( /kotlin = rock.integer.signed.2_to_rock.string/interpret( value = rock.reflection.literal( value = . ) ) )
rock.integer.signed.4.literal - ( /kotlin = rock.integer.signed.4_to_rock.string/interpret( value = rock.reflection.literal( value = . ) ) )
rock.integer.signed.8.literal - ( /kotlin = rock.integer.signed.8_to_rock.string/interpret( value = rock.reflection.literal( value = . ) ) )
rock.integer.unsigned.1.literal - ( /kotlin = rock.integer.unsigned.1_to_rock.string/interpret( value = rock.reflection.literal( value = . ) ) )
rock.integer.unsigned.2.literal - ( /kotlin = rock.integer.unsigned.2_to_rock.string/interpret( value = rock.reflection.literal( value = . ) ) )
rock.integer.unsigned.4.literal - ( /kotlin = rock.integer.unsigned.4_to_rock.string/interpret( value = rock.reflection.literal( value = . ) ) )
rock.integer.unsigned.8.literal - ( /kotlin = rock.integer.unsigned.8_to_rock.string/interpret( value = rock.reflection.literal( value = . ) ) )
rock.float.2.literal - ( /kotlin = rock.float.2_to_rock.string/interpret( value = rock.reflection.literal( value = . ) ) )
rock.float.4.literal - ( /kotlin = rock.float.4_to_rock.string/interpret( value = rock.reflection.literal( value = . ) ) )
rock.float.8.literal - ( /kotlin = rock.float.8_to_rock.string/interpret( value = rock.reflection.literal( value = . ) ) )

rock.integer.signed.4.and - ( /kotlin = "/*TODO*/" )
rock.integer.signed.4.dec - ( /kotlin = "/*TODO*/" )
rock.integer.signed.4.div - ( /kotlin = "/*TODO*/" )
rock.integer.signed.4.inc - ( /kotlin = "/*TODO*/" )
rock.integer.signed.4.inv - ( /kotlin = "/*TODO*/" )
rock.integer.signed.4.or - ( /kotlin = "/*TODO*/" )
rock.integer.signed.4.shl - ( /kotlin = "/*TODO*/" )
rock.integer.signed.4.shr - ( /kotlin = "/*TODO*/" )
rock.integer.signed.4.ushr - ( /kotlin = "/*TODO*/" )
rock.integer.signed.4.xor - ( /kotlin = "/*TODO*/" )

rock.string.literal - ( /kotlin = `"${rock.reflection.literal(value=.)}"`/interpret )
rock.string.concatenate - ( /kotlin = `(${.left} + ${.right})`/interpret )
rock.string.concatenateList - ( /kotlin = `(${rock.string.join( values = .values  separator = " + " )})`/interpret )
rock.string.join - ( /kotlin = "/*TODO*/" )

rock.boolean.true - ( /kotlin = "true"/interpret )
rock.boolean.false - ( /kotlin = "false"/interpret )
rock.boolean.and - ( /kotlin = `(${.left} && ${.right})`/interpret )
rock.boolean.not - ( /kotlin = `(!${.value})`/interpret )
rock.boolean.or - ( /kotlin = `(${.left} || ${.right})`/interpret )
rock.boolean.xor - ( /kotlin = `(${.left} xor ${.right})`/interpret )
rock.boolean.equals - ( /kotlin = `(${.left} == ${.right})`/interpret )
rock.boolean.all - ( /kotlin = "/*TODO*/" )
rock.boolean.any - ( /kotlin = "/*TODO*/" )
rock.boolean.xorList - ( /kotlin = "/*TODO*/" )

rock.void.literal - ( /kotlin = "Unit"/interpret )
rock.pointer.get - ( /kotlin = .this )
rock.pointer.set - ( /kotlin = `${.this} = ${.value}`/interpret )
rock.control.if - ( /kotlin = `if(${.condition}){ ${.then} } else { ${.else} }`/interpret )
rock.control.loop - ( /kotlin = `while(true){ ${.body} }`/interpret )
rock.control.loop.break - ( /kotlin = "break"/interpret )
rock.control.loop.continue - ( /kotlin = "continue"/interpret )
rock.control.block.variable.get - ( /kotlin = rock.reflection.key/interpret( value = .variable ))
rock.control.block.variable - ( /kotlin = `var ${rock.reflection.key/interpret( value = . )} = ${.value}`/interpret )
rock.control.block - ( /kotlin = `${rock.string.joinMapValues/interpret( values = .variables  separator = "\n"/interpret )}\n${rock.string.join/interpret( values = .statements  separator = "\n" )}`/interpret )
rock.debug.print - ( /kotlin = `println(${.value})`/interpret )
rock.reflection.key - ( /kotlin = `"${rock.reflection.key/interpret( value = .value)"`/interpret)
rock.meta.comment - ( /kotlin = `/*${.value}*/`/interpret)