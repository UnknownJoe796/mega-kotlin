package com.ivieleague.mega.stdlib

import com.ivieleague.mega.StandardFunction
import com.ivieleague.mega.builder.execute
import com.ivieleague.mega.builder.executeSequence

fun StandardLibrary.boolean() {
    functions["mega.boolean.true"] = StandardFunction { true }
    functions["mega.boolean.false"] = StandardFunction { false }

    //{Generated by Boolean.gen.kt
    functions["mega.boolean.and"] = StandardFunction {
        (it.execute("this") as kotlin.Boolean).and(it.execute("other") as kotlin.Boolean)
    }
    functions["mega.boolean.not"] = StandardFunction {
        (it.execute("this") as kotlin.Boolean).not()
    }
    functions["mega.boolean.or"] = StandardFunction {
        (it.execute("this") as kotlin.Boolean).or(it.execute("other") as kotlin.Boolean)
    }
    functions["mega.boolean.xor"] = StandardFunction {
        (it.execute("this") as kotlin.Boolean).xor(it.execute("other") as kotlin.Boolean)
    }
    functions["mega.boolean.equals"] = StandardFunction {
        (it.execute("this") as kotlin.Any) == it.execute("other") as kotlin.Any
    }
    //}

    functions["mega.string.andList"] = StandardFunction { it.executeSequence<Boolean>("values").all { it } }
    functions["mega.string.orList"] = StandardFunction { it.executeSequence<Boolean>("values").any { it } }
    functions["mega.string.xorList"] = StandardFunction { it.executeSequence<Boolean>("values").fold(false) { current, it -> current xor it } }
}